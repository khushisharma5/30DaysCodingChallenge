class Solution {
public:
    int search(vector<int>& nums, int target) {
        int start=0;
        int end= nums.size() - 1;

        int  mid = start + (end - start) / 2;  // if start= 2^31 -1 and end =2^31 -1 i.e., range of integer then space complexity increases 
        // so, to avoid this problem calculate mid using this method.

        while(start <= end){
            if(nums[mid] == target){
            return mid;
            }
            if(target > nums[mid]){
            start = mid + 1;
            }
            else {
            end=  mid - 1;
            }
            mid = start + (end - start) /2;
        }

        return -1;
    }
};
